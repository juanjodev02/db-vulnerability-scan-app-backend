import { Injectable } from '@nestjs/common';
import * as sql from 'mssql';
import { AnalysisResult, Database, Relation } from './models/models.interface';

@Injectable()
export class AppService {
  constructor() {
    this.getConnection().then(() => {
      console.log('ConexiÃ³n exitosa');
      this.getRelations(5).then((relations) => {
        console.log(relations);
      });
    });
  }

  async getConnection(): Promise<sql.ConnectionPool> {
    return sql.connect({
      user: 'sa',
      password: 'Auditoria2022!',
      server: 'localhost',
      port: 1433,
      options: {
        trustServerCertificate: true,
      },
    });
  }

  async getDatabases(): Promise<Database[]> {
    const sql = await this.getConnection();
    const res = await sql.query(
      'SELECT name, database_id, create_date FROM sys.databases;',
    );

    return res.recordset.map(({ name, database_id, create_date }) => ({
      name,
      id: database_id,
    }));
  }
  async analyzeDatabase(databaseId: number): Promise<AnalysisResult> {
    const relations = await this.getRelations(databaseId);
    return null;
  }

  async getRelations(databaseId: number): Promise<Relation[]> {
    // get all tables in the database and get all relations between them
    const sql = await this.getConnection();
    const res = await sql.query(
      `SELECT
        o.name AS origin_table,
        d.name AS destination_table,
        r.name AS relation_name
      FROM
        sys.tables o
      INNER JOIN sys.tables d ON o.object_id = d.object_id
      INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = o.object_id
      INNER JOIN sys.foreign_key_columns fkc ON fkc.constraint_object_id = fk.object_id
      INNER JOIN sys.columns c ON c.object_id = fkc.referenced_object_id AND c.column_id = fkc.referenced_column_id
      INNER JOIN sys.columns c2 ON c2.object_id = fkc.parent_object_id AND c2.column_id = fkc.parent_column_id
      INNER JOIN sys.tables r ON r.object_id = fk.referenced_object_id`,
    );

    return res.recordset.map(
      ({ origin_table, destination_table, relation_name }) => ({
        originTable: origin_table,
        destinationTable: destination_table,
        name: relation_name,
      }),
    );
  }
}
